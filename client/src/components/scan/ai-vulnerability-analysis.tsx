import { useState } from "react";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Badge } from "@/components/ui/badge";
import { Progress } from "@/components/ui/progress";
import { Brain, TrendingUp, Clock, AlertTriangle, CheckCircle, Target, Zap } from "lucide-react";
import { useQuery } from "@tanstack/react-query";
import { apiRequest } from "@/lib/queryClient";

interface AIAnalysisProps {
  scanId: number;
  isVisible: boolean;
  onToggle: () => void;
}

export function AIVulnerabilityAnalysis({ scanId, isVisible, onToggle }: AIAnalysisProps) {
  const [businessContext, setBusinessContext] = useState("");

  const { data: aiAnalysis, isLoading, error } = useQuery({
    queryKey: ["/api/scans", scanId, "ai-analysis", businessContext],
    queryFn: async () => {
      const url = businessContext 
        ? `/api/scans/${scanId}/ai-analysis?businessContext=${encodeURIComponent(businessContext)}`
        : `/api/scans/${scanId}/ai-analysis`;
      const response = await apiRequest("GET", url);
      return response.json();
    },
    enabled: isVisible && scanId > 0,
    staleTime: 5 * 60 * 1000, // 5 minutes
  });

  const getRiskColor = (riskLevel: string) => {
    switch (riskLevel) {
      case 'critical': return 'bg-red-600 text-white';
      case 'high': return 'bg-orange-600 text-white';
      case 'medium': return 'bg-yellow-600 text-white';
      case 'low': return 'bg-green-600 text-white';
      default: return 'bg-blue-600 text-white';
    }
  };

  const getUrgencyIcon = (urgency: string) => {
    switch (urgency) {
      case 'immediate': return <AlertTriangle className="w-4 h-4 text-red-500" />;
      case 'high': return <TrendingUp className="w-4 h-4 text-orange-500" />;
      case 'medium': return <Clock className="w-4 h-4 text-yellow-500" />;
      case 'low': return <CheckCircle className="w-4 h-4 text-green-500" />;
      default: return <Target className="w-4 h-4 text-blue-500" />;
    }
  };

  if (!isVisible) {
    return (
      <Card className="border-2 border-dashed border-muted-foreground/30">
        <CardContent className="flex items-center justify-center py-8">
          <div className="text-center">
            <Brain className="w-12 h-12 text-muted-foreground mx-auto mb-4" />
            <h3 className="text-lg font-medium text-foreground mb-2">AI Risk Assessment</h3>
            <p className="text-muted-foreground mb-4">
              Get intelligent vulnerability prioritization powered by AI
            </p>
            <Button onClick={onToggle} className="bg-primary hover:bg-primary/90">
              <Brain className="w-4 h-4 mr-2" />
              Analyze with AI
            </Button>
          </div>
        </CardContent>
      </Card>
    );
  }

  if (isLoading) {
    return (
      <Card>
        <CardHeader>
          <CardTitle className="flex items-center">
            <Brain className="w-5 h-5 mr-2 text-primary animate-pulse" />
            AI Risk Assessment
          </CardTitle>
        </CardHeader>
        <CardContent>
          <div className="flex items-center justify-center py-8">
            <div className="text-center">
              <div className="w-8 h-8 border-4 border-primary border-t-transparent rounded-full animate-spin mx-auto mb-4"></div>
              <p className="text-muted-foreground">Analyzing vulnerabilities with AI...</p>
            </div>
          </div>
        </CardContent>
      </Card>
    );
  }

  if (error) {
    return (
      <Card className="border-destructive">
        <CardHeader>
          <CardTitle className="flex items-center text-destructive">
            <AlertTriangle className="w-5 h-5 mr-2" />
            AI Analysis Error
          </CardTitle>
        </CardHeader>
        <CardContent>
          <p className="text-muted-foreground mb-4">
            Unable to generate AI analysis. This could be due to missing API keys or service availability.
          </p>
          <Button onClick={() => window.location.reload()} variant="outline">
            Retry Analysis
          </Button>
        </CardContent>
      </Card>
    );
  }

  if (!aiAnalysis) {
    return null;
  }

  return (
    <div className="space-y-6">
      {/* Executive Summary */}
      <Card>
        <CardHeader>
          <CardTitle className="flex items-center">
            <Brain className="w-5 h-5 mr-2 text-primary" />
            AI Risk Assessment
            <Badge variant="secondary" className="ml-auto">
              {aiAnalysis.totalVulnerabilities} vulnerabilities analyzed
            </Badge>
          </CardTitle>
        </CardHeader>
        <CardContent className="space-y-4">
          <div className="bg-muted/50 rounded-lg p-4">
            <h4 className="font-medium text-foreground mb-2">Executive Summary</h4>
            <p className="text-muted-foreground text-sm leading-relaxed">
              {aiAnalysis.executiveSummary}
            </p>
          </div>

          {/* Risk Distribution */}
          <div>
            <h4 className="font-medium text-foreground mb-3">Risk Distribution</h4>
            <div className="grid grid-cols-5 gap-3">
              {Object.entries(aiAnalysis.riskDistribution).map(([level, count]) => (
                <div key={level} className="text-center">
                  <div className={`w-12 h-12 rounded-full flex items-center justify-center mx-auto mb-2 ${getRiskColor(level)}`}>
                    <span className="font-bold">{count as number}</span>
                  </div>
                  <p className="text-xs text-muted-foreground capitalize">{level}</p>
                </div>
              ))}
            </div>
          </div>

          {/* Action Plan */}
          <div className="bg-blue-50 dark:bg-blue-950/30 rounded-lg p-4">
            <h4 className="font-medium text-foreground mb-2 flex items-center">
              <Target className="w-4 h-4 mr-2 text-blue-600" />
              Recommended Action Plan
            </h4>
            <p className="text-sm text-blue-800 dark:text-blue-200 leading-relaxed">
              {aiAnalysis.recommendedActionPlan}
            </p>
          </div>
        </CardContent>
      </Card>

      {/* Top Priority Vulnerabilities */}
      {aiAnalysis.topPriorityVulnerabilities.length > 0 && (
        <Card>
          <CardHeader>
            <CardTitle className="flex items-center">
              <Zap className="w-5 h-5 mr-2 text-orange-500" />
              Top Priority Vulnerabilities
            </CardTitle>
          </CardHeader>
          <CardContent>
            <div className="space-y-4">
              {aiAnalysis.topPriorityVulnerabilities.slice(0, 5).map((vuln: any, index: number) => (
                <div key={vuln.vulnerabilityId} className="border border-border rounded-lg p-4">
                  <div className="flex items-start justify-between mb-3">
                    <div className="flex items-center space-x-3">
                      <div className="flex items-center justify-center w-8 h-8 rounded-full bg-muted text-muted-foreground font-medium text-sm">
                        {index + 1}
                      </div>
                      <div>
                        <Badge className={getRiskColor(vuln.riskLevel)}>
                          {vuln.riskLevel.toUpperCase()}
                        </Badge>
                        <div className="flex items-center space-x-2 mt-1">
                          {getUrgencyIcon(vuln.urgency)}
                          <span className="text-sm text-muted-foreground capitalize">
                            {vuln.urgency} urgency
                          </span>
                        </div>
                      </div>
                    </div>
                    <div className="text-right">
                      <div className="text-2xl font-bold text-foreground">
                        {vuln.riskScore}
                        <span className="text-sm text-muted-foreground">/10</span>
                      </div>
                      <div className="text-xs text-muted-foreground">Risk Score</div>
                    </div>
                  </div>

                  <div className="mb-3">
                    <p className="text-sm text-muted-foreground leading-relaxed">
                      {vuln.aiReasoning}
                    </p>
                  </div>

                  {/* Risk Factors */}
                  <div className="grid grid-cols-3 gap-4 mb-3">
                    <div>
                      <div className="text-xs text-muted-foreground mb-1">Exploitability</div>
                      <Progress value={vuln.exploitability * 10} className="h-2" />
                      <div className="text-xs text-muted-foreground mt-1">
                        {vuln.exploitability}/10
                      </div>
                    </div>
                    <div>
                      <div className="text-xs text-muted-foreground mb-1">Business Impact</div>
                      <Progress value={vuln.businessImpact * 10} className="h-2" />
                      <div className="text-xs text-muted-foreground mt-1">
                        {vuln.businessImpact}/10
                      </div>
                    </div>
                    <div>
                      <div className="text-xs text-muted-foreground mb-1">Remediation</div>
                      <Badge variant="outline" className="text-xs">
                        {vuln.remediationComplexity}
                      </Badge>
                    </div>
                  </div>

                  {/* Contextual Factors */}
                  {vuln.contextualFactors && vuln.contextualFactors.length > 0 && (
                    <div>
                      <div className="text-xs text-muted-foreground mb-2">Risk Factors:</div>
                      <div className="flex flex-wrap gap-1">
                        {vuln.contextualFactors.map((factor: string, idx: number) => (
                          <Badge key={idx} variant="secondary" className="text-xs">
                            {factor}
                          </Badge>
                        ))}
                      </div>
                    </div>
                  )}
                </div>
              ))}
            </div>
          </CardContent>
        </Card>
      )}
    </div>
  );
}