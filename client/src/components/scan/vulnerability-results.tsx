import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Badge } from "@/components/ui/badge";
import { ExternalLink, ArrowRight } from "lucide-react";
import { useQuery } from "@tanstack/react-query";

export function VulnerabilityResults() {
  const { data: vulnerabilities = [] } = useQuery({
    queryKey: ["/api/vulnerabilities?limit=5"],
    refetchInterval: 5000,
  });

  const getSeverityColor = (severity: string) => {
    switch (severity) {
      case 'critical': return 'bg-red-600 text-white';
      case 'high': return 'bg-orange-600 text-white';
      case 'medium': return 'bg-yellow-600 text-white';
      case 'low': return 'bg-green-600 text-white';
      default: return 'bg-blue-600 text-white';
    }
  };

  const getVulnerabilityTitle = (type: string) => {
    switch (type) {
      case 'xss': return 'Cross-Site Scripting (XSS)';
      case 'sqli': return 'SQL Injection';
      case 'directory_traversal': return 'Directory Traversal';
      default: return type.toUpperCase();
    }
  };

  return (
    <Card>
      <CardHeader>
        <div className="flex items-center justify-between">
          <CardTitle>Latest Vulnerabilities</CardTitle>
          <Button variant="ghost" size="sm" className="text-blue-600 hover:text-blue-700">
            View All <ArrowRight className="w-4 h-4 ml-1" />
          </Button>
        </div>
      </CardHeader>
      <CardContent>
        {vulnerabilities.length === 0 ? (
          <p className="text-gray-500 text-center py-8">No vulnerabilities found yet</p>
        ) : (
          <div className="space-y-3">
            {vulnerabilities.map((vuln: any) => (
              <div key={vuln.id} className={`border rounded-lg p-4 ${
                vuln.severity === 'critical' ? 'border-red-200 bg-red-50' :
                vuln.severity === 'high' ? 'border-orange-200 bg-orange-50' :
                vuln.severity === 'medium' ? 'border-yellow-200 bg-yellow-50' :
                'border-green-200 bg-green-50'
              }`}>
                <div className="flex items-start justify-between">
                  <div className="flex-1">
                    <div className="flex items-center space-x-2 mb-2">
                      <Badge className={getSeverityColor(vuln.severity)}>
                        {vuln.severity.toUpperCase()}
                      </Badge>
                      <span className="text-sm font-medium text-gray-900">
                        {getVulnerabilityTitle(vuln.type)}
                      </span>
                    </div>
                    <p className="text-sm text-gray-600 mb-2">{vuln.description}</p>
                    <p className="text-xs text-gray-500 font-mono">{vuln.endpoint}</p>
                    {vuln.parameter && (
                      <p className="text-xs text-gray-500 mt-1">Parameter: {vuln.parameter}</p>
                    )}
                  </div>
                  <Button variant="ghost" size="sm" className="text-gray-400 hover:text-gray-600">
                    <ExternalLink className="w-4 h-4" />
                  </Button>
                </div>
              </div>
            ))}
          </div>
        )}
      </CardContent>
    </Card>
  );
}
